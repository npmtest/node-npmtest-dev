{"/home/travis/build/npmtest/node-npmtest-dev/test.js":"/* istanbul instrument in package npmtest_dev */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dev/lib.npmtest_dev.js":"/* istanbul instrument in package npmtest_dev */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_dev = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_dev = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-dev/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-dev && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_dev */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_dev\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_dev.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_dev.rollup.js'] =\n            local.assetsDict['/assets.npmtest_dev.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_dev.__dirname + '/lib.npmtest_dev.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dev/node_modules/dev/index.js":"module.exports = require('./manager.js')\n","/home/travis/build/npmtest/node-npmtest-dev/node_modules/dev/manager.js":"var util = require('util')\n\t, fs = require('fs')\n\t, sys = require('sys')\n\t, spawn = require('child_process').spawn\n\t, Inotify = require('inotify').Inotify\n\t, inotify = new Inotify()\n\n\nmodule.exports = function(options) {\n\treturn new NodeManager(options)\n}\n\n/**\n * The manager which watches files and restarts\n * Main options:\n *   run {string!}: the js-file to run\n *                 e.g \"./app.js\", no default, required\n *\n *  watchDir {string} the folder to watch, default: '.'\n *\n *  ignoredPaths {array}: array of ignored paths, which shouldn't not be watched\n *    members can be\n *      strings (matched as ===),\n *      regexps (like extension check) or\n *      function(p) { returns true if path p should be ignored }\n *    default: []\n *\n *\n * Logging options\n *   debug {bool}: adds additional output about watches and changes, default: false\n *   logger {object}: custom logger, must have error and debug methods\n *\n */\nfunction NodeManager(options) {\n\n\t// public interface\n\tthis.watchFile = watchFile\n\tthis.watchFolder = watchFolder\n\tthis.run = run\n\tthis.start = start\n\n\tif (!options.run) {\n\t\tthrow new Error(\"Please provide what to run. E.g. new NodeManager({ run: './app.js' })\")\n\t}\n\n\tvar ignoredPaths = options.ignoredPaths || []\n\n\tvar logger = options.logger || {\n\t\tdebug: function() {\n\t\t\toptions.debug && console.log.apply(console, arguments)\n\t\t},\n\n\t\terror: function() {\n\t\t\tconsole.log.apply(console, arguments)\n\t\t}\n\t}\n\n\tvar onRunOutput = options.onRunOutput || function(data) {\n      util.print(data);\n    }\n\n\tvar onRunError = options.onRunError || function(data) {\n      util.print(data);\n    }\n\n\t/**\n\t * Run with default watch config\n\t */\n\tfunction start() {\n\t\tvar dir = options.watchDir || '.'\n\n\t\tthis.run();\n\t\tthis.watchFile(dir); // watch current folder\n\t\tthis.watchFolder(dir); // watch all files under current folder\n\n\t\tprocess.stdin.resume();\n\t\tprocess.stdin.setEncoding('utf8');\n\t}\n\n\tvar child // references the child process, after spawned\n\n\n\t/**\n\t * executes the command given by the argument\n\t */\n\tfunction run() {\n\t\t// run the server\n\t\tvar node = options.node || options.run.match(/\\.coffee$/) ? 'coffee' : 'node'\n\n\t\tchild = spawn(node, [options.run].concat(process.argv.slice(3)));\n\n\t\t// let the child's output escape.\n\t\tchild.stdout.on('data', onRunOutput);\n\t\tchild.stderr.on('data', onRunError);\n\n\t\t// let the user's typing get to the child\n\t\tprocess.stdin.pipe(child.stdin);\n\n\t\tconsole.log('\\nStarting: ' + options.run);\n\t}\n\n\tvar restartIsScheduled\n\t\t, restartTimer\n\t\t, lastRestartTime\n\n\n\t/**\n\t * restarts the server\n\t * doesn't restart more often than once per 10 ms\n         * suspends restart a little bit in case of massive changes to save CPU\n\t */\n\tfunction restart() {\n\n\t\tif (restartIsScheduled) return\n\n\t\tif (lastRestartTime && lastRestartTime + 500 > new Date) {\n\t\t\t// if last restart was recent, we postpone new restart a bit to save resources,\n\t\t\t// because it often means that many files are changed at once\n\t\t\tschedule(150)\n\t\t} else {\n\t\t\t// in any way we schedule restart in next 10 ms, so many change events on one file/dir lead to single restart\n\t\t\tschedule(10)\n\t\t}\n\n\t\tfunction schedule(ms) {\n\t\t\trestartIsScheduled = true\n\t\t\tsetTimeout(function() {\n\t\t\t\trestartIsScheduled = false\n\t\t\t\tdoRestart()\n\t\t\t}, ms)\n\t\t}\n\n\t\tfunction doRestart() {\n\t\t\tlastRestartTime = +new Date\n\t\t\t// kill if running\n\t\t\tif (child) child.kill();\n\t\t\t// run it again\n\t\t\trun();\n\t\t}\n\t}\n\n\n\t/**\n\t * watches all files and subdirectories in given folder (recursively),\n\t * excluding the folder itself\n\t * @param root\n\t */\n\tfunction watchFolder(root) {\n\t\tvar files = fs.readdirSync(root);\n\n\t\tfiles.forEach(function(file) {\n\t\t\tvar path = root + '/' + file\n\t\t\t\t, stat = fs.statSync(path);\n\n\t\t\t// watch file/folder\n\t\t\tif (isIgnoredPath(path)) {\n\t\t\t\tlogger.debug(\"ignored path \" + path)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\t// ignore absent files\n\t\t\tif (!stat) {\n\t\t\t\tlogger.error(\"ERROR: couldn't stat \" + path)\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\twatchFile(path);\n\n\t\t\t// recur if directory\n\t\t\tif (stat.isDirectory()) {\n\t\t\t\twatchFolder(path);\n\t\t\t}\n\t\t});\n\n\t}\n\n\tfunction isIgnoredPath(path) {\n\n\t\tfor (var i = 0; i < ignoredPaths.length; i++) {\n\t\t\tvar test = ignoredPaths[i];\n\n\t\t\tlogger.debug(\"isIgnoredPath: path \" + path + \" tested against \" + test);\n\t\t\tif (test === path) return true;\n\t\t\tif (test instanceof RegExp && test.test(path)) return true;\n\t\t\tif (test instanceof Function && test(path)) return true;\n\t\t}\n\n\t\tlogger.debug(\"path is ok: \" + path)\n\t\treturn false;\n\t}\n\n\t// arrays for debug events output\n\tvar flag2event = {}\n\tvar eventsAll = [\n\t\t\"IN_ACCESS\", \"IN_ATTRIB\", \"IN_CLOSE\", \"IN_CLOSE_NOWRITE\", \"IN_CLOSE_WRITE\", \"IN_CREATE\",\n\t\t\"IN_DELETE\", \"IN_DELETE_SELF\", \"IN_DONT_FOLLOW\", \"IN_IGNORED\", \"IN_ISDIR\",\n\t\t\"IN_MASK_ADD\", \"IN_MODIFY\", \"IN_MOVE\", \"IN_MOVED_FROM\", \"IN_MOVED_TO\", \"IN_MOVE_SELF\",\n\t\t\"IN_ONESHOT\", \"IN_ONLYDIR\", \"IN_OPEN\", \"IN_Q_OVERFLOW\", \"IN_UNMOUNT\"\n\t]\n\teventsAll.forEach(function(event) {\n\t\tflag2event[Inotify[event]] = event\n\t})\n\n\n\tfunction watchFile(file) {\n\n\t\tlogger.debug(\"Watch: \" + file);\n\n\t\tfunction callback(event) {\n\t\t\tevent.toString = function() {\n\t\t\t\t// translate event flags into string\n\t\t\t\t// e.g IN_CLOSE | IN_CLOSE_WRITE\n\t\t\t\tvar txt = []\n\t\t\t\teventsAll.forEach(function(e) {\n\t\t\t\t\tif (Inotify[e] & this.mask) txt.push(e)\n\t\t\t\t}.bind(this))\n\t\t\t\treturn txt.join(' | ')\n\t\t\t}\n\n\t\t\tif (event.name) { // name of updated file inside watched folder\n\t\t\t\tvar path = file + '/' + event.name\n\t\t\t\tif (isIgnoredPath(path)) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tif (event.mask & Inotify.IN_CREATE) { // IN_CREATE always comes here\n\t\t\t\t\t// when a new file is created we wait for it's close_write\n\t\t\t\t\twatchFile(path)\n\t\t\t\t\tif (fs.statSync(path).isDirectory()) {\n\t\t\t\t\t\twatchFolder(path)\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tlogger.debug(path + ' ' + event);\n\n\t\t\t\trestart()\n\n\t\t\t} else {\n\t\t\t\tlogger.debug(file + ' ' + event);\n\n\t\t\t\trestart()\n\t\t\t}\n\n\t\t}\n\n\n\t\t// we watch for these events for files and folders\n\t\t// there may be many IN_MODIFY, so we don't watch it, but we await for IN_CLOSE_WRITE\n\t\tvar watchEvents = [ 'IN_CLOSE_WRITE' , 'IN_CREATE' , 'IN_DELETE' , 'IN_DELETE_SELF' , 'IN_MOVE_SELF', 'IN_MOVE' ];\n\n\t\tinotify.addWatch({\n\t\t\tpath: file,\n\t\t\twatch_for: watchEvents.reduce(function(prev, cur) {\n\t\t\t\treturn prev | Inotify[cur]\n\t\t\t}, 0),\n\t\t\tcallback: callback\n\t\t})\n\n\t}\n\n\n}\n"}